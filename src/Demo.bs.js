// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Random = require("bs-platform/lib/js/random.js");

function unwrap(a, b) {
  if (a.tag) {
    if (b.tag) {
      return a[0] + b[0];
    } else {
      return "foo";
    }
  } else if (a[0] === "foo" && !b.tag) {
    return b[0];
  } else {
    return "foo";
  }
}

console.log(unwrap(/* Left */Block.__(0, ["foo"]), /* Left */Block.__(0, ["x"])));

function foo(x) {
  console.log(x);
  return x;
}

console.log(Random.$$int(10));

function inc(n) {
  return n + 1 | 0;
}

var r = List.fold_left((function (prim, prim$1) {
        return prim + prim$1 | 0;
      }), 0, List.map(inc, /* :: */[
          1,
          /* :: */[
            2,
            /* :: */[
              3,
              /* [] */0
            ]
          ]
        ]));

console.log(r);

function now() {
  return /* Millis */[12];
}

function tap(f, v) {
  Curry._1(f, v);
  return v;
}

function $(f, g, x) {
  return Curry._1(f, Curry._1(g, x));
}

function $great$great$eq(prim, prim$1) {
  return prim$1.then(Curry.__1(prim));
}

function pure(prim) {
  return Promise.resolve(prim);
}

var Promise$1 = /* module */[
  /* >>= */$great$great$eq,
  /* pure */pure
];

var prim = new Promise((function (resolve, _) {
        return resolve(2);
      }));

function prim$1(param) {
  return Promise.resolve((console.log(param), param));
}

prim.then(prim$1);

var x = "foo";

exports.x = x;
exports.unwrap = unwrap;
exports.foo = foo;
exports.inc = inc;
exports.r = r;
exports.now = now;
exports.tap = tap;
exports.$ = $;
exports.Promise = Promise$1;
/*  Not a pure module */
